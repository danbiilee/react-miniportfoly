{"version":3,"sources":["components/Menu/MainMenu.js","module/layout.js","components/Layout/Layout.js","components/Layout/Sidebar.js","components/Layout/Content.js","components/Layout/Card.js","pages/Home.js","module/formMode.js","components/Menu/SubMenu.js","components/Layout/Post.js","components/Modal/Modal.js","pages/Diary/FormWrapper.js","lib/asyncUtils.js","module/boards.js","pages/Diary/index.js","module/palette.js","pages/Workbox/ChangeTheme.js","module/tasklists.js","pages/Workbox/Tasklist/components/MberList.js","pages/Workbox/Tasklist/components/TagList.js","pages/Workbox/Tasklist/components/Calendar.js","utils/utils.js","pages/Workbox/Tasklist/Header.js","pages/Workbox/Tasklist/Bottom.js","pages/Workbox/Tasklist/components/Tag.js","pages/Workbox/Tasklist/components/Point.js","pages/Workbox/Tasklist/components/Checklist.js","pages/Workbox/Tasklist/components/Deadline.js","pages/Workbox/Tasklist/Task.js","pages/Workbox/Tasklist/components/PointList.js","pages/Workbox/Tasklist/SidePopup.js","pages/Workbox/Tasklist/index.js","pages/Workbox/Tasklist/AddTaskList.js","pages/Workbox/Tasklist.js","App.js","reportWebVitals.js","module/index.js","index.js"],"names":["styled","nav","props","theme","layout","mainColor","MainMenu","SET_LAYOUT","initialState","div","layoutBg1","layoutBorder1","layoutBg2","layoutBorder2","headerColor","cardBorder","cardBg","section","SET_FORM_MODE","textColor","article","fullHeight","isOpen","width","height","bg","form","button","type","stateUtils","prevData","loading","data","error","handleAsyncActions","key","keepData","SUCCESS","ERROR","state","action","payload","GET_BOARDS_ALL","GET_BOARDS_ALL_SUCCESS","GET_BOARDS_ALL_ERROR","boards","initialData","board","console","log","SET_COLOR","outer","component","priority","important","notice","ul","li","color","tasklistId","taskId","checklistId","ADD_TASKLIST","DEL_TASKLIST","CHANGE_TASKLIST_TITLE","SET_TASK","CLEAR_TASK","ADD_TASK","DEL_TASK","TOGGLE_TASK","CHANGE_TASK_TITLE","CHANGE_TASK_SETTINGS","ADD_CHECKLIST","tasklists","task","activeMber","activeTag","tag","Date","toISOString","substring","header","input","activeCreate","activeDate","css","Button","isSetting","isOver","isFin","isDone","openDone","activePoint","left","Wrapper","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","palette","value","formMode","reducer","concat","id","title","filter","item","map","tasks","find","t","finDt","checklist","store","createStore","composeWithDevTools","ReactDOM","render","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.051a70a9.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Nav = styled.nav`\r\n  margin: 40px 0 0 -10px;\r\n  ul {\r\n    a {\r\n      display: inline-block;\r\n      width: 85px;\r\n      margin-bottom: 2px;\r\n      padding: 10px 10px 10px 15px;\r\n      background: ${props => props.theme.layout.mainColor};\r\n      border: 1px solid #a5a5a5;\r\n      border-radius: 10px;\r\n      color: #fff;\r\n      font-size: 0.9rem;\r\n      text-align: center;\r\n      &.selected {\r\n        background: #fff;\r\n        color: #333;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction MainMenu() {\r\n  return (\r\n    <Nav>\r\n      <ul>\r\n        <li>\r\n          <NavLink exact to=\"/\" activeClassName=\"selected\">\r\n            홈\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/diary\" activeClassName=\"selected\">\r\n            다이어리\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/workbox\" activeClassName=\"selected\">\r\n            워크박스\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/photo\" activeClassName=\"selected\">\r\n            사진첩\r\n          </NavLink>\r\n        </li>\r\n        <li>\r\n          <NavLink to=\"/gbook\" activeClassName=\"selected\">\r\n            방명록\r\n          </NavLink>\r\n        </li>\r\n      </ul>\r\n    </Nav>\r\n  );\r\n}\r\n\r\nexport default MainMenu;\r\n","const SET_LAYOUT = 'layout/SET_LAYOUT';\r\n\r\nexport const setLayout = payload => ({ type: SET_LAYOUT, payload });\r\n\r\nconst initialState = {};\r\n\r\nexport default function layout(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_LAYOUT:\r\n      const { key, value } = action.payload;\r\n      return  state[key] ? { ...state } : { ...state, [key]: value}; \r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useEffect, useRef } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { setLayout } from '../../module/layout';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst BorderWrapper = styled.div`\r\n  height: 95vh;\r\n  padding: 25px;\r\n  background: ${props => props.theme.layout.layoutBg1};\r\n  border: 1px solid ${props => props.theme.layout.layoutBorder1};\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst BgWrapper = styled.div`\r\n  display: flex;\r\n  height: 100%;\r\n  padding: 20px 8px;\r\n  background: ${props => props.theme.layout.layoutBg2};\r\n  border: 2px dashed ${props => props.theme.layout.layoutBorder2};\r\n  border-radius: 10px;\r\n`;\r\n\r\nconst Layout = ({ children }) => {\r\n  const { layout } = useSelector(state => state);\r\n  const dispatch = useDispatch();\r\n  const layout1 = useRef();\r\n  const layout2 = useRef();\r\n\r\n  /* useEffect(() => {\r\n    if(!layout.layout1) {\r\n      dispatch(setLayout({\r\n        key: 'layout1',\r\n        value: layout1.current\r\n      }));\r\n    }\r\n    if(!layout.layout2) {\r\n      dispatch(setLayout({\r\n        key: 'layout2',\r\n        value: layout2.current\r\n      }));\r\n    }\r\n  }, [layout, dispatch, layout1]); */\r\n\r\n  return (\r\n    <Wrapper>\r\n      <BorderWrapper ref={layout1}>\r\n        <BgWrapper ref={layout2}>{children}</BgWrapper>\r\n      </BorderWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst SidebarBlock = styled.div`\r\n  width: 25%;\r\n  margin-right: 8px;\r\n  & > ul {\r\n    display: flex;\r\n    justify-content: center;\r\n    font-size: 0.8rem;\r\n    line-height: 1.4;\r\n    li:first-of-type {\r\n      padding-right: 10px;\r\n      margin-right: 10px;\r\n      border-right: 1px solid;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Sidebar = ({ children }) => {\r\n  return (\r\n    <SidebarBlock>\r\n      <ul>\r\n        <li>TODAY 0</li>\r\n        <li>TOTAL 0</li>\r\n      </ul>\r\n      {children}\r\n    </SidebarBlock>\r\n  );\r\n};\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ContentBlock = styled.div`\r\n  z-index: 10;\r\n  width: 68%;\r\n  h1 {\r\n    color: ${props => props.theme.layout.headerColor};\r\n    font-weight: bold;\r\n    font-size: 1.1rem;\r\n  }\r\n`;\r\n\r\nconst Content = ({ children }) => {\r\n  return (\r\n    <ContentBlock>\r\n      <h1>Danbi Miniportfoly</h1>\r\n      {children}\r\n    </ContentBlock>\r\n  );\r\n};\r\n\r\nexport default Content;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst CardBlock = styled.div`\r\n  overflow-y: auto;\r\n  width: 100%;\r\n  height: 96%;\r\n  margin: 10px 0 5px;\r\n  padding: 20px;\r\n  border: 1px solid ${props => props.theme.layout.cardBorder};\r\n  border-radius: 10px;\r\n  background: ${props => props.theme.layout.cardBg};\r\n  section {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n`;\r\n\r\nconst Card = ({ children }) => {\r\n  return <CardBlock>{children}</CardBlock>;\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Layout from '../components/Layout/Layout';\r\nimport Sidebar from '../components/Layout/Sidebar';\r\nimport Content from '../components/Layout/Content';\r\nimport Card from '../components/Layout/Card';\r\nimport MainMenu from '../components/Menu/MainMenu';\r\n\r\n// section in Content\r\nconst ContentSection = styled.section`\r\n  height: fit-content !important;\r\n  h2 {\r\n    margin-bottom: 10px;\r\n    font-weight: bold;\r\n    color: ${props => props.theme.layout.mainColor};\r\n  }\r\n  &:first-of-type {\r\n    div {\r\n      width: 100%;\r\n      height: 250px;\r\n      background: lightblue;\r\n      border: 1px solid gray;\r\n    }\r\n  }\r\n  &:last-of-type {\r\n    h2 {\r\n      border-bottom: 1px dashed gray;\r\n      line-height: 1.4;\r\n    }\r\n    div {\r\n      margin-bottom: 10px;\r\n    }\r\n  }\r\n  ul {\r\n    line-height: 1.8;\r\n    li {\r\n      height: 30px;\r\n      border-bottom: 1px dashed gray;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ProfileSection = styled.section`\r\n  height: fit-content !important;\r\n  &:first-of-type {\r\n    p:first-of-type {\r\n      margin-top: 10px;\r\n    }\r\n  }\r\n  &:last-of-type {\r\n    border-top: 1px dashed gray;\r\n  }\r\n  img {\r\n    width: 100%;\r\n    height: auto;\r\n    object-fit: cover;\r\n  }\r\n`;\r\n\r\nconst Home = () => {\r\n  return (\r\n    <Layout>\r\n      <Sidebar>\r\n        <Card>\r\n          <ProfileSection>\r\n            <img\r\n              src={process.env.PUBLIC_URL + 'resources/img/profile.jpg'}\r\n              alt=\"profile\"\r\n            />\r\n            <p>주니어 개발자</p>\r\n            <p>\r\n              HTML5, CSS3, SCSS, JS, REACT, VUE, NODE, MONGODB, JAVA, ORACLE,\r\n              MYSQL, GIT\r\n            </p>\r\n          </ProfileSection>\r\n          <ProfileSection>\r\n            <p>\r\n              이단비 <span>(♀) 1992.08.19</span>\r\n            </p>\r\n            <p>danbi.db@gmail.com</p>\r\n            <p>https://github.com/danbiilee</p>\r\n            <p>010-4013-4147</p>\r\n            <p>경기도 안양시</p>\r\n          </ProfileSection>\r\n        </Card>\r\n      </Sidebar>\r\n      <Content>\r\n        <Card>\r\n          <ContentSection>\r\n            <h2>미니룸</h2>\r\n            <div>준비중</div>\r\n          </ContentSection>\r\n          <ContentSection>\r\n            <h2>한 줄 이력</h2>\r\n            <div>\r\n              <ul>\r\n                <li>KH 수료</li>\r\n                <li>소프트원 재직중</li>\r\n                <li></li>\r\n                <li></li>\r\n                <li></li>\r\n              </ul>\r\n            </div>\r\n          </ContentSection>\r\n        </Card>\r\n      </Content>\r\n      <MainMenu />\r\n    </Layout>\r\n  );\r\n};\r\nexport default Home;\r\n","const SET_FORM_MODE = 'formMode/SET_FORM_MODE';\r\n\r\nexport const setFormMode = payload => ({ type: SET_FORM_MODE, payload });\r\n\r\nconst initialState = false;\r\n\r\nexport default function formMode(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_FORM_MODE:\r\n      return !state;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { NavLink, useRouteMatch } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { setFormMode } from '../../module/formMode';\r\n\r\nconst ListDiv = styled.div`\r\n  h2 {\r\n    padding-bottom: 10px;\r\n    border-bottom: 1px solid gray;\r\n    font-weight: bold;\r\n    a {\r\n      color: ${props => props.theme.layout.mainColor};\r\n    }\r\n  }\r\n  ul {\r\n    display: flex;\r\n    flex-direction: column;\r\n    margin-top: 10px;\r\n    font-size: 0.9rem;\r\n    li {\r\n      padding: 5px;\r\n    }\r\n    ul {\r\n      padding-left: 15px;\r\n    }\r\n    a {\r\n      color: ${props => props.theme.layout.textColor};\r\n      &.selected {\r\n        font-weight: bold;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst SubMenu = ({ title, list }) => {\r\n  const match = useRouteMatch();\r\n  const dispatch = useDispatch();\r\n  const { formMode: isForm } = useSelector(state => state);\r\n  const handleMode = () => {\r\n    if (isForm) {\r\n      dispatch(setFormMode());\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ListDiv>\r\n      <h2>\r\n        <NavLink\r\n          exact\r\n          to={match.url}\r\n          activeClassName=\"selected\"\r\n          onClick={handleMode}\r\n        >\r\n          {title}\r\n        </NavLink>\r\n      </h2>\r\n      <nav>\r\n        <ul>\r\n          {list.map(item => (\r\n            <li key={item.id}>\r\n              <NavLink\r\n                to={match.url + item.url}\r\n                activeClassName=\"selected\"\r\n                onClick={handleMode}\r\n              >\r\n                {item.title}\r\n              </NavLink>\r\n              {item.child && (\r\n                <ul>\r\n                  {item.child.map(child => (\r\n                    <li key={child.id}>\r\n                      <NavLink\r\n                        to={match.url + item.url + child.url}\r\n                        activeClassName=\"selected\"\r\n                        onClick={handleMode}\r\n                      >\r\n                        {child.title}\r\n                      </NavLink>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              )}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </nav>\r\n    </ListDiv>\r\n  );\r\n};\r\n\r\nexport default SubMenu;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst Article = styled.article`\r\n  width: 100%;\r\n  height: ${props => (props.fullHeight ? '100%' : 'max-content')};\r\n  /* height: 88%; */\r\n  margin: 50px 0;\r\n  &:first-of-type {\r\n    margin-top: 30px};\r\n  }\r\n  h3 {\r\n    height: 30px;\r\n    margin-bottom: 10px;\r\n    background: #eee;\r\n    border-top: 1px solid #aaa;\r\n    color: #333;\r\n    text-align: center;\r\n    font-weight: bold;\r\n    line-height: 30px;\r\n  }\r\n  .post-info {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 10px 5px;\r\n    p:first-of-type {\r\n      color: ${props => props.theme.layout.textColor};\r\n    }\r\n    p:last-of-type {\r\n      font-size: 0.9rem;\r\n    }\r\n  }\r\n  .post-contents {\r\n    img {\r\n    }\r\n    p {\r\n      padding: 20px 10px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Post = ({ fixed, children }) => {\r\n  return <Article fixed={fixed}>{children}</Article>;\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Background = styled.div`\r\n  display: ${props => (props.isOpen ? 'block' : 'none')};\r\n  z-index: 999;\r\n  position: absolute;\r\n  top: 0;\r\n  left: 0;\r\n  width: 100%;\r\n  height: 100%;\r\n  background: rgba(0, 0, 0, 0.5);\r\n`;\r\n\r\nconst ModalWrapper = styled.div`\r\n  display: ${props => (props.isOpen ? 'block' : 'none')};\r\n  z-index: 9999;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  width: ${props => props.width}px;\r\n  height: ${props => props.height}px;\r\n  margin: -${props => props.height / 2}px 0 0 -${props => props.width / 2}px;\r\n  background: #fff;\r\n  border-radius: 10px;\r\n  border: 3px solid;\r\n  h4 {\r\n    height: 100px;\r\n    background: ${props => props.bg};\r\n    border-top-left-radius: 10px;\r\n    border-top-right-radius: 10px;\r\n    text-align: center;\r\n    line-height: 100px;\r\n    font-size: 1.5rem;\r\n    font-weight: bold;\r\n  }\r\n`;\r\n\r\nconst Modal = ({ isOpen, width, height, bg, children }) => {\r\n  return (\r\n    <>\r\n      <Background isOpen={isOpen} />\r\n      <ModalWrapper isOpen={isOpen} width={width} height={height} bg={bg}>\r\n        {children}\r\n      </ModalWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState } from 'react';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport * as apiBoards from '../../api/boards';\r\nimport { setFormMode } from '../../module/formMode';\r\n\r\nconst Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  button {\r\n    align-self: flex-end;\r\n    margin: 0 10px 10px 0;\r\n  }\r\n  input {\r\n    height: 28px;\r\n  }\r\n  textarea {\r\n    height: 90%;\r\n    margin-top: 10px;\r\n    resize: none;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  float: right;\r\n  margin: 0 10px 10px 0;\r\n`;\r\n\r\nconst FormWrapper = ({ regusr, passwd }) => {\r\n  const dispatch = useDispatch();\r\n  const { formMode: isForm } = useSelector(state => state);\r\n\r\n  // Board\r\n  const initialState = {\r\n    bbs_ctgry1: 'WORK_LOG',\r\n    bbs_ctgry2: 'REACT',\r\n    title: '',\r\n    content: '',\r\n    regusr,\r\n    passwd,\r\n  };\r\n  const [board, setBoard] = useState(initialState);\r\n  const onChange = e => {\r\n    const { name, value } = e.target;\r\n    setBoard({\r\n      ...board,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  // Submit form\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (!board.title) {\r\n      alert('제목을 입력해 주세요!');\r\n      return;\r\n    }\r\n    if (!board.content) {\r\n      alert('내용을 입력해 주세요!');\r\n      return;\r\n    }\r\n\r\n    if (window.confirm('글을 등록하시겠습니까?')) {\r\n      apiBoards\r\n        .addBoard(board)\r\n        .then(data => {\r\n          if (data.success) {\r\n            alert('글 등록 성공!');\r\n            dispatch(setFormMode(!isForm));\r\n            setBoard(initialState);\r\n          }\r\n        })\r\n        .catch(err => alert('글 등록 실패!'));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={onSubmit}>\r\n      <button type=\"submit\">등록하기</button>\r\n      <div className=\"select-wrapper\">\r\n        <select name=\"bbs_ctgry1\" value={board.bbs_ctgry1} onChange={onChange}>\r\n          <option value=\"WORK_LOG\">작업일지</option>\r\n          <option value=\"STUDY\">공부노트</option>\r\n        </select>\r\n        {board.bbs_ctgry1 === 'STUDY' && (\r\n          <select\r\n            name=\"bbs_ctgry2\"\r\n            value={board.bbs_ctgry2}\r\n            onChange={onChange}\r\n          >\r\n            <option value=\"REACT\">리액트</option>\r\n            <option value=\"JS\">자바스크립트</option>\r\n          </select>\r\n        )}\r\n      </div>\r\n      <input type=\"text\" name=\"title\" value={board.title} onChange={onChange} />\r\n      <textarea\r\n        name=\"content\"\r\n        value={board.content}\r\n        onChange={onChange}\r\n      ></textarea>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default FormWrapper;\r\n","export const stateUtils = {\r\n  initial: (initialData = null) => ({\r\n    loading: false,\r\n    data: initialData,\r\n    error: null,\r\n  }),\r\n  loading: (prevData = null) => ({\r\n    loading: true,\r\n    data: prevData,\r\n    error: null,\r\n  }),\r\n  success: data => ({\r\n    loading: false,\r\n    data,\r\n    error: null,\r\n  }),\r\n  error: error => ({\r\n    loading: false,\r\n    data: null,\r\n    error,\r\n  }),\r\n};\r\n\r\nexport const createPromiseThunk = (type, promiseCreator) => {\r\n  console.log('createPromiseThunk', type);\r\n  // const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\r\n\r\n  // return param => async dispatch => {\r\n  //   try {\r\n  //     dispatch({ type, param }); // 요청 시작\r\n  //     const payload = await promiseCreator(param); // 결과의 이름을 payload로 통일\r\n  //     dispatch({ type: SUCCESS, payload, param }); // 성공\r\n  //   } catch (e) {\r\n  //     dispatch({ type: ERROR, error: e }); // 실패\r\n  //   }\r\n  // };\r\n};\r\n\r\nexport const handleAsyncActions = (type, key, keepData = false) => {\r\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\r\n  return (state, action) => {\r\n    switch (action.type) {\r\n      case type:\r\n        return {\r\n          ...state,\r\n          [key]: stateUtils.loading(keepData ? state[key].data : null),\r\n        };\r\n      case SUCCESS:\r\n        return {\r\n          ...state,\r\n          [key]: stateUtils.success(action.payload),\r\n        };\r\n      case ERROR:\r\n        return {\r\n          ...state,\r\n          [key]: stateUtils.error(action.error),\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n};\r\n\r\nconst defaulIdtSelector = param => param;\r\nexport const createPromiseThunkById = (\r\n  type,\r\n  promiseCreator,\r\n  idSelector = defaulIdtSelector,\r\n) => {\r\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\r\n\r\n  return param => async dispatch => {\r\n    const id = idSelector(param);\r\n    console.log(type, id);\r\n    try {\r\n      dispatch({ type, meta: id });\r\n      const payload = await promiseCreator(param);\r\n      dispatch({ type: SUCCESS, payload, meta: id });\r\n    } catch (e) {\r\n      dispatch({ type: ERROR, error: e, meta: id });\r\n    }\r\n  };\r\n};\r\n\r\nexport const handleAsyncActionsById = (type, key, keepData = false) => {\r\n  const [SUCCESS, ERROR] = [`${type}_SUCCESS`, `${type}_ERROR`];\r\n\r\n  return (state, action) => {\r\n    const id = action.meta;\r\n    switch (action.type) {\r\n      case type:\r\n        return {\r\n          ...state,\r\n          [key]: {\r\n            ...state[key],\r\n            [id]: stateUtils.loading(\r\n              keepData ? state[key][id] && state[key][id].data : null,\r\n            ),\r\n          },\r\n        };\r\n      case SUCCESS:\r\n        return {\r\n          ...state,\r\n          [key]: {\r\n            ...state[key],\r\n            [id]: stateUtils.success(action.payload),\r\n          },\r\n        };\r\n      case ERROR:\r\n        return {\r\n          ...state,\r\n          [key]: {\r\n            ...state[key],\r\n            [id]: stateUtils.error(action.error),\r\n          },\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n};\r\n","import * as api from '../api/boards';\r\nimport {\r\n  stateUtils,\r\n  handleAsyncActions,\r\n  createPromiseThunk,\r\n} from '../lib/asyncUtils';\r\n\r\n// Board 목록 전체 조회\r\nconst GET_BOARDS_ALL = 'boards/GET_BOARDS_ALL';\r\nconst GET_BOARDS_ALL_SUCCESS = 'boards/GET_BOARDS_ALL_SUCCESS';\r\nconst GET_BOARDS_ALL_ERROR = 'boards/GET_BOARDS_ALL_ERROR';\r\n\r\nconst initialState = {\r\n  boards: stateUtils.initial(),\r\n  board: {},\r\n};\r\n\r\nexport const getBoardsAll = createPromiseThunk(GET_BOARDS_ALL, api.getBoards);\r\n\r\nexport default function boards(state = initialState, action) {\r\n  switch (action.type) {\r\n    case GET_BOARDS_ALL:\r\n    case GET_BOARDS_ALL_SUCCESS:\r\n    case GET_BOARDS_ALL_ERROR:\r\n      const reducer = handleAsyncActions(GET_BOARDS_ALL, 'boards', true);\r\n      return reducer(state, action);\r\n    //return handleAsyncActions(GET_BOARDS_ALL, 'boards', true)(state, action);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Switch, Route, useRouteMatch } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport Layout from '../../components/Layout/Layout';\r\nimport Card from '../../components/Layout/Card';\r\nimport MainMenu from '../../components/Menu/MainMenu';\r\nimport SubMenu from '../../components/Menu/SubMenu';\r\nimport Sidebar from '../../components/Layout/Sidebar';\r\nimport Content from '../../components/Layout/Content';\r\nimport Post from '../../components/Layout/Post';\r\nimport Modal from '../../components/Modal/Modal';\r\nimport FormWrapper from './FormWrapper';\r\nimport * as apiSessions from '../../api/sessions';\r\nimport { setFormMode } from '../../module/formMode';\r\nimport { getBoardsAll } from '../../module/boards';\r\nimport { getBoards } from '../../api/boards';\r\n\r\nconst PostWrapper = styled.div`\r\n  overflow-y: auto;\r\n  height: 100%;\r\n  padding: 0 20px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  float: right;\r\n  margin: 0 10px 10px 0;\r\n`;\r\n\r\n// Modal\r\nconst ButtonWrapper = styled.div``;\r\n\r\nconst Diary = () => {\r\n  console.log('diary');\r\n  const match = useRouteMatch();\r\n  const list = [\r\n    { id: 1, title: '📁작업일지', url: '/workLog' },\r\n    {\r\n      id: 2,\r\n      title: '📁공부노트',\r\n      url: '/study',\r\n      child: [\r\n        { id: 1, title: '📝리액트', url: '/react' },\r\n        { id: 2, title: '📝자바스크립트', url: '/js' },\r\n      ],\r\n    },\r\n  ];\r\n\r\n  // Get boards\r\n  const dispatch = useDispatch();\r\n  const { loading, data, error } = useSelector(state => state.boards.boards);\r\n  console.log(loading, data, error);\r\n\r\n  // useEffect(() => {\r\n  //   dispatch(getBoardsAll());\r\n  // }, [dispatch]);\r\n  getBoards();\r\n\r\n  // Check & Set regusr/passwd\r\n  const [passwd, setPasswd] = useState('');\r\n  const [regusr, setRegusr] = useState('');\r\n  const handleRegInfo = e => {\r\n    const { name, value } = e.target;\r\n    if (name === 'passwd') setPasswd(value);\r\n    else setRegusr(value);\r\n  };\r\n\r\n  // Modal\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleModal = () => {\r\n    setPasswd('');\r\n    setRegusr('');\r\n    setIsOpen(!isOpen);\r\n  };\r\n\r\n  // Mode type: view, form\r\n  const { formMode: isForm } = useSelector(state => state);\r\n  const handleMode = () => {\r\n    // if you try to change mode type to form, (false -> true)\r\n    // check passwd & enter regusr\r\n    if (!isForm) {\r\n      if (!regusr) {\r\n        alert('등록자명을 입력해주세요!');\r\n        return;\r\n      }\r\n      if (!passwd) {\r\n        alert('비밀번호를 입력해주세요!');\r\n        return;\r\n      }\r\n      apiSessions\r\n        .getPasswd()\r\n        .then(data => {\r\n          if (data.passwd !== passwd) {\r\n            alert('유효하지 않은 비밀번호입니다!');\r\n            return;\r\n          } else {\r\n            dispatch(setFormMode(!isForm));\r\n            handleModal();\r\n          }\r\n        })\r\n        .catch(err => alert('비밀번호 불러오기 실패!'));\r\n    } else {\r\n      dispatch(setFormMode(!isForm));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <Modal isOpen={isOpen} width={500} height={300} bg=\"salmon\">\r\n        <h4>✔ 비밀번호 확인</h4>\r\n        <input\r\n          type=\"text\"\r\n          name=\"regusr\"\r\n          value={regusr}\r\n          placeholder=\"등록자명을 입력하세요\"\r\n          onChange={handleRegInfo}\r\n        />\r\n        <input\r\n          type=\"password\"\r\n          name=\"passwd\"\r\n          value={passwd}\r\n          onChange={handleRegInfo}\r\n        />\r\n        <ButtonWrapper>\r\n          <button type=\"button\" onClick={handleModal}>\r\n            닫기\r\n          </button>\r\n          <button type=\"button\" onClick={handleMode}>\r\n            적용하기\r\n          </button>\r\n        </ButtonWrapper>\r\n      </Modal>\r\n      <Sidebar>\r\n        <Card>\r\n          <SubMenu title=\"다이어리\" list={list} />\r\n        </Card>\r\n      </Sidebar>\r\n      <Content>\r\n        <Card>\r\n          <PostWrapper>\r\n            <Switch>\r\n              <Route exact path={match.path}>\r\n                {!isForm ? (\r\n                  <>\r\n                    <Button type=\"button\" onClick={handleModal}>\r\n                      등록하기\r\n                    </Button>\r\n                    <Post>\r\n                      <h3>다이어리 메인</h3>\r\n                      <div className=\"post-info\">\r\n                        <p>이단비</p>\r\n                        <p>2020-11-12</p>\r\n                      </div>\r\n                      <div className=\"post-contents\">\r\n                        <img\r\n                          src={\r\n                            process.env.PUBLIC_URL + 'resources/img/profile.jpg'\r\n                          }\r\n                          alt=\"profile\"\r\n                        />\r\n                        <p>모든 글 전체 조회?</p>\r\n                      </div>\r\n                    </Post>\r\n                    <Post>\r\n                      <h3>다이어리 메인</h3>\r\n                      <div className=\"post-info\">\r\n                        <p>이단비</p>\r\n                        <p>2020-11-12</p>\r\n                      </div>\r\n                      <div className=\"post-contents\">\r\n                        <img\r\n                          src={\r\n                            process.env.PUBLIC_URL + 'resources/img/profile.jpg'\r\n                          }\r\n                          alt=\"profile\"\r\n                        />\r\n                        <p>모든 글 전체 조회?</p>\r\n                      </div>\r\n                    </Post>\r\n                  </>\r\n                ) : (\r\n                  <FormWrapper regusr={regusr} passwd={passwd} />\r\n                )}\r\n              </Route>\r\n              <Route path={`${match.path}/workLog`}>작업일지</Route>\r\n              <Route exact path={`${match.path}/study`}>\r\n                스터디 메인\r\n              </Route>\r\n              <Route path={`${match.path}/study/react`}>스터디 리액트</Route>\r\n              <Route path={`${match.path}/study/js`}>스터디 자바스크립트</Route>\r\n            </Switch>\r\n          </PostWrapper>\r\n        </Card>\r\n      </Content>\r\n      <MainMenu />\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default Diary;\r\n","const SET_COLOR = 'palette/SET_COLOR';\r\n\r\nexport const setColor = payload => ({ type: SET_COLOR, payload });\r\n\r\nconst initialState = {\r\n  layout: {\r\n    outer: 'gray',\r\n    layoutBorder1: 'black',\r\n    layoutBg1: '#a9d2d9',\r\n    layoutBorder2: '#fff',\r\n    layoutBg2: 'lightgray',\r\n    cardBorder: '#a5a5a5',\r\n    cardBg: '#fff',\r\n    mainColor: '#238db3',\r\n    headerColor: '#333',\r\n    textColor: '#07698c',\r\n  },\r\n  component: {\r\n    priority: '#e03131',\r\n    important: '#3b5bdb',\r\n    notice: '#fcc419',\r\n  }\r\n};\r\n\r\nexport default function palette(state = initialState, action) {\r\n  switch (action.type) {\r\n    case SET_COLOR:\r\n      const { key, value } = action.payload;\r\n      return {\r\n        ...state,\r\n        palette: {\r\n          ...state.palette,\r\n          [key]: value,\r\n        },\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled, { css } from 'styled-components';\r\nimport { setColor } from '../../module/palette';\r\nimport Post from '../../components/Layout/Post';\r\n\r\nconst ThemeWrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  border: 1px solid gray;\r\n`;\r\n\r\nconst TabList = styled.ul`\r\n  display: flex;\r\n`;\r\n\r\nconst Tab = styled.li`\r\n  display: block;\r\n  width: 80px;\r\n  height: 50px;\r\n  border: 1px solid;\r\n  background: ${props => props.bg};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ChangeWrapper = styled.div`\r\n  border: 1px solid pink;\r\n  \r\n`;\r\n\r\nconst ColorWrapper = styled.div`\r\n  display: flex;\r\n  padding: 20px;\r\n`;\r\n\r\nconst Color = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  &:last-of-type {\r\n    margin-left: 20px;\r\n    p {\r\n      margin-bottom: 11px;\r\n    }\r\n  }\r\n  p {\r\n    &:first-of-type {\r\n      font-weight: bold;\r\n      font-size: 1.5rem;\r\n    }\r\n    &:last-of-type {\r\n      margin-top: 5px;\r\n    }  \r\n  }\r\n  div {\r\n    width: 80px;\r\n    height: 80px;\r\n    margin-top: 15px;\r\n    background: ${props => props.color};\r\n    border: 1px solid;\r\n  }\r\n  input {\r\n    width: 85px;\r\n    height: 88px;\r\n    border: 0;\r\n    margin: 0;\r\n    padding: 0;\r\n    background: none;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  height: 35px;\r\n  padding: 0 10px;\r\n  border-radius: 10px;\r\n  border: 1px solid;\r\n  line-height: 35px;\r\n  font-weight: bold;\r\n  font-size: .9rem;\r\n  outline: 0;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ChangeTheme = () => {\r\n  // Redux\r\n  const dispatch = useDispatch();\r\n  const { layout: palette } = useSelector(state => state.palette);\r\n  const { layout } = useSelector(state => state);\r\n\r\n  // Get TabMenu List \r\n  const tabList = [];\r\n  let index = 1;\r\n  for (let key in palette) {\r\n    tabList.push({ id: index++, target: key, color: palette[key]});\r\n  }\r\n\r\n  // Selected layout & hexColor\r\n  const [target, setTarget] = useState('');\r\n  const [hexColor, setHexColor] = useState('');\r\n\r\n  // Hex Color Code\r\n  const getRandomHexColor = () => {\r\n    const letters = '0123456789ABCDEF';\r\n    let hex = '#';\r\n    for (let i = 0; i < 6; i++) {\r\n      hex += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return hex;\r\n  };\r\n  const handleHexColor = e => setHexColor(e.target.value);\r\n\r\n  // Handle Color\r\n  const handleLayoutColor = target => {\r\n    // Active layout DOM \r\n    // const key = target.includes('1') ? 'layout1' : target.includes('2') ? 'layout2' : 'card';\r\n    // console.log(layout.layout1.style.background);\r\n\r\n    // Q. how to detect new hexCode after setHexColor????\r\n    const newHexColor = getRandomHexColor();\r\n    setTarget(target);\r\n    setHexColor(newHexColor);\r\n  };\r\n\r\n  const changeLayoutColor = () => {\r\n    dispatch(setColor(target, hexColor));\r\n  };\r\n\r\n  return (\r\n    <Post>\r\n      <h3>테마 변경하기</h3>\r\n      <ThemeWrapper>\r\n        <TabList>\r\n          {\r\n            tabList.map(tab => (<Tab key={tab.id} bg={tab.color} zIndex={tabList.length - tab.id} onClick={() => handleLayoutColor(tab.target)}></Tab>))\r\n          }\r\n        </TabList>\r\n        <ChangeWrapper>\r\n          <ColorWrapper>\r\n            <Color color={palette[target]}>\r\n              <p>BEFORE</p>\r\n              <div></div>\r\n              <p>{palette[target]}</p>\r\n            </Color>\r\n            <Color color={hexColor}>\r\n              <p>AFTER</p>\r\n              <input\r\n                type=\"color\"\r\n                name={target}\r\n                value={hexColor}\r\n                onChange={handleHexColor}\r\n              />\r\n              <p>{hexColor}</p>\r\n            </Color>\r\n          </ColorWrapper>\r\n          <Button type=\"button\" onClick={() => setHexColor(getRandomHexColor())}>\r\n            RANDOM!\r\n          </Button>\r\n          <Button type=\"button\" onClick={changeLayoutColor}>\r\n            적용하기\r\n          </Button>\r\n          <Button type=\"button\">\r\n            되돌리기\r\n          </Button>\r\n        </ChangeWrapper>\r\n      </ThemeWrapper>\r\n    </Post>\r\n  );\r\n};\r\n\r\nexport default ChangeTheme;\r\n","// id값\r\nlet tasklistId = 0; // ADD_TASKLIST\r\nlet taskId = 0; // ADD_TASK\r\nlet checklistId = 0; // ADD_CHECKLIST\r\n\r\n// 업무리스트\r\nconst ADD_TASKLIST = 'tasklist/ADD_TASKLIST';\r\nconst DEL_TASKLIST = 'tasklist/DEL_TASKLIST';\r\nconst CHANGE_TASKLIST_TITLE = 'tasklist/CHANGE_TASKLIST_TITLE';\r\n//업무\r\nconst SET_TASK = 'tasklist/SET_TASK';\r\nconst CLEAR_TASK = 'tasklist/CLEAR_TASK';\r\nconst ADD_TASK = 'tasklist/ADD_TASK';\r\nconst DEL_TASK = 'tasklist/DEL_TASK';\r\nconst TOGGLE_TASK = 'tasklist/TOGGLE_TASK';\r\nconst CHANGE_TASK_TITLE = 'tasklist/CHANGE_TASK_TITLE';\r\nconst CHANGE_TASK_SETTINGS = 'tasklist/CHANGE_TASK_SETTINGS';\r\nconst ADD_CHECKLIST = 'tasklist/ADD_CHECKLIST';\r\n\r\n// 업무리스트\r\nexport const addTasklist = payload => ({ type: ADD_TASKLIST, payload });\r\nexport const delTasklist = payload => ({ type: DEL_TASKLIST, payload });\r\nexport const changeTasklistTitle = payload => ({\r\n  type: CHANGE_TASKLIST_TITLE,\r\n  payload,\r\n});\r\n//업무\r\nexport const setTask = payload => ({ type: SET_TASK, payload });\r\nexport const clearTask = () => ({ type: CLEAR_TASK });\r\nexport const addTask = payload => ({ type: ADD_TASK, payload });\r\nexport const delTask = payload => ({ type: DEL_TASK, payload });\r\nexport const toggleTask = payload => ({ type: TOGGLE_TASK, payload });\r\nexport const changeTaskTitle = payload => ({\r\n  type: CHANGE_TASK_TITLE,\r\n  payload,\r\n});\r\nexport const changeTaskSettings = payload => ({\r\n  type: CHANGE_TASK_SETTINGS,\r\n  payload,\r\n});\r\nexport const addChecklist = payload => ({ type: ADD_CHECKLIST, payload });\r\n\r\nconst initialState = {\r\n  tasklists: [],\r\n  task: {},\r\n};\r\n\r\nexport default function tasklists(state = initialState, action) {\r\n  switch (action.type) {\r\n    case ADD_TASKLIST:\r\n      return {\r\n        ...state,\r\n        tasklists: state.tasklists.concat({\r\n          id: tasklistId++,\r\n          title: action.payload,\r\n        }),\r\n      };\r\n    case DEL_TASKLIST:\r\n      return {\r\n        ...state,\r\n        tasklists: state.tasklists.filter(item => item.id !== action.payload),\r\n      };\r\n    case CHANGE_TASKLIST_TITLE:\r\n      return {\r\n        ...state,\r\n        tasklists: state.tasklists.map(item =>\r\n          item.id === action.payload.id\r\n            ? { ...item, title: action.payload.title }\r\n            : item,\r\n        ),\r\n      };\r\n    case SET_TASK:\r\n      const { tasks } = state.tasklists[action.payload.tasklistId];\r\n      return {\r\n        ...state,\r\n        task: tasks.find(item => item.id === action.payload.taskId),\r\n      };\r\n    case CLEAR_TASK:\r\n      return {\r\n        ...state,\r\n        task: {},\r\n      };\r\n    case ADD_TASK:\r\n      let task = action.payload.task;\r\n      task.id = taskId++;\r\n      return {\r\n        ...state,\r\n        tasklists: state.tasklists.map(item =>\r\n          item.id === action.payload.id\r\n            ? {\r\n                ...item,\r\n                tasks: item.tasks ? item.tasks.concat(task) : [].concat(task),\r\n              }\r\n            : item,\r\n        ),\r\n      };\r\n    case DEL_TASK:\r\n      return {\r\n        ...state,\r\n        tasklists: state.tasklists.map(item =>\r\n          item.id === action.payload.tasklistId\r\n            ? {\r\n                ...item,\r\n                tasks: item.tasks.filter(t => t.id !== action.payload.taskId),\r\n              }\r\n            : item,\r\n        ),\r\n      };\r\n    case TOGGLE_TASK:\r\n      return {\r\n        ...state,\r\n        tasklists: state.tasklists.map(item =>\r\n          item.id === action.payload.id\r\n            ? {\r\n                ...item,\r\n                tasks: item.tasks.map(t =>\r\n                  t.id === action.payload.task.id\r\n                    ? {\r\n                        ...t,\r\n                        isDone: !t.isDone,\r\n                        finDt: action.payload.task.finDt,\r\n                      }\r\n                    : t,\r\n                ),\r\n              }\r\n            : item,\r\n        ),\r\n      };\r\n    case CHANGE_TASK_TITLE:\r\n      return {\r\n        ...state,\r\n        tasklists: state.tasklists.map(item =>\r\n          item.id === action.payload.tasklistId\r\n            ? {\r\n                ...item,\r\n                tasks: item.tasks.map(t =>\r\n                  t.id === action.payload.taskId\r\n                    ? {\r\n                        ...t,\r\n                        title: action.payload.title,\r\n                      }\r\n                    : t,\r\n                ),\r\n              }\r\n            : item,\r\n        ),\r\n      };\r\n    case CHANGE_TASK_SETTINGS:\r\n      return {\r\n        ...state,\r\n        tasklists: state.tasklists.map(item =>\r\n          item.id === action.payload.tasklistId\r\n            ? {\r\n                ...item,\r\n                tasks: item.tasks.map(t =>\r\n                  t.id === action.payload.task.id ? action.payload.task : t,\r\n                ),\r\n              }\r\n            : item,\r\n        ),\r\n      };\r\n    case ADD_CHECKLIST:\r\n      const beforeChecklist = action.payload.task.checklist;\r\n      let { checklist } = action.payload;\r\n      checklist.id = checklistId++;\r\n      return {\r\n        ...state,\r\n        tasklists: state.tasklists.map(item =>\r\n          item.id === action.payload.tasklistId\r\n            ? {\r\n                ...item,\r\n                tasks: item.tasks.map(t =>\r\n                  t.id === action.payload.task.id\r\n                    ? {\r\n                        ...t,\r\n                        checklist: t.checklist.concat(checklist),\r\n                      }\r\n                    : t,\r\n                ),\r\n              }\r\n            : item,\r\n        ),\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {\r\n  MdGroupAdd,\r\n  MdCheck,\r\n  MdFace,\r\n  MdSentimentNeutral,\r\n} from 'react-icons/md';\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  svg {\r\n    margin-right: 5px;\r\n    font-size: 1.4rem;\r\n  }\r\n  .btn {\r\n    cursor: pointer;\r\n    &:hover {\r\n      color: #656a70;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ListWrapper = styled.ul`\r\n  display: ${props => (props.activeMber ? 'block' : 'none')};\r\n  position: absolute;\r\n  top: 30px;\r\n  left: 0;\r\n  z-index: 10;\r\n  width: 140px;\r\n  height: 120px;\r\n  overflow-y: auto;\r\n  padding: 5px;\r\n  background: white;\r\n  font-size: 0.8rem;\r\n  li {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 5px;\r\n    cursor: pointer;\r\n    &:hover {\r\n      background: #eee;\r\n      cursor: pointer;\r\n    }\r\n    .info-wrapper {\r\n      display: flex;\r\n      align-items: center;\r\n    }\r\n    .info-wrapper + svg {\r\n      margin: 0;\r\n    }\r\n  }\r\n`;\r\n\r\nconst MberList = ({\r\n  onToggle,\r\n  activeMber,\r\n  selectedMberList,\r\n  handleMberList,\r\n}) => {\r\n  const mberList = [\r\n    {\r\n      mberNo: 1,\r\n      mberId: 'danbi',\r\n      mberNm: '이단비',\r\n      profile: MdFace,\r\n    },\r\n    {\r\n      mberNo: 2,\r\n      mberId: 'ash',\r\n      mberNm: '애쉬',\r\n      profile: MdSentimentNeutral,\r\n    },\r\n    {\r\n      mberNo: 3,\r\n      mberId: 'sikk',\r\n      mberNm: '식케이',\r\n      profile: MdFace,\r\n    },\r\n    {\r\n      mberNo: 4,\r\n      mberId: 'moon',\r\n      mberNm: '문',\r\n      profile: MdSentimentNeutral,\r\n    },\r\n    {\r\n      mberNo: 5,\r\n      mberId: 'jay',\r\n      mberNm: '박재범',\r\n      profile: MdFace,\r\n    },\r\n    {\r\n      mberNo: 6,\r\n      mberId: 'coo',\r\n      mberNm: '쿠기',\r\n      profile: MdSentimentNeutral,\r\n    },\r\n  ]; // 임시\r\n  let tempMberList = [];\r\n  if (mberList.length) {\r\n    tempMberList = mberList.map(mber => {\r\n      const m = selectedMberList.find(m => m.mberNo === mber.mberNo);\r\n      if (m) return { ...mber, isSelected: true };\r\n      else return { ...mber, isSelected: false };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <Wrapper>\r\n      <MdGroupAdd\r\n        className=\"btn\"\r\n        role=\"button\"\r\n        onClick={() => onToggle('mber')}\r\n      />\r\n      <ListWrapper activeMber={activeMber}>\r\n        {tempMberList.map(mber => (\r\n          <li\r\n            key={mber.mberNo}\r\n            onClick={() => {\r\n              const fm = mberList.find(item => item.mberNo === mber.mberNo);\r\n              handleMberList(fm);\r\n            }}\r\n          >\r\n            <div>\r\n              {React.createElement(mber.profile)}\r\n              {mber.mberNm}\r\n            </div>\r\n            {mber.isSelected && <MdCheck />}\r\n          </li>\r\n        ))}\r\n      </ListWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default MberList;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { MdLocalOffer, MdCheck } from 'react-icons/md';\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  svg {\r\n    margin-right: 5px;\r\n    font-size: 1.2rem;\r\n  }\r\n  .btn {\r\n    cursor: pointer;\r\n    &:hover {\r\n      color: #656a70;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ListWrapper = styled.ul`\r\n  position: absolute;\r\n  top: 30px;\r\n  left: 0;\r\n  z-index: 10;\r\n  display: ${props => (props.activeTag ? 'block' : 'none')};\r\n  width: 120px;\r\n  height: 120px;\r\n  overflow-y: auto;\r\n  padding: 5px;\r\n  background: white;\r\n  font-size: 0.8rem;\r\n  li {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 5px;\r\n    cursor: pointer;\r\n    &:hover {\r\n      background: #eee;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst TagWrapper = styled.div`\r\n  display: inline-block;\r\n  padding: 4px 5px;\r\n  border-radius: 1rem;\r\n  background: ${props => props.tag && props.theme.component[props.tag]};\r\n  color: white;\r\n  font-size: 0.6rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Tag = ({ tag }) => {\r\n  return <TagWrapper tag={tag}>{tag}</TagWrapper>;\r\n};\r\n\r\nconst TagList = ({ onToggle, activeTag, tag, handleTag }) => {\r\n  const tagList = [\r\n    {\r\n      tagNo: 1,\r\n      tagNm: 'priority',\r\n    },\r\n    {\r\n      tagNo: 2,\r\n      tagNm: 'important',\r\n    },\r\n    {\r\n      tagNo: 3,\r\n      tagNm: 'notice',\r\n    },\r\n  ]; // 임시\r\n  let tempTagList = tagList.map(t => {\r\n    if (t.tagNm === tag) return { ...t, isSelected: true };\r\n    else return { ...t, isSelected: false };\r\n  });\r\n\r\n  return (\r\n    <Wrapper>\r\n      <MdLocalOffer\r\n        className=\"btn\"\r\n        role=\"button\"\r\n        onClick={() => onToggle('tag')}\r\n      />\r\n      <ListWrapper activeTag={activeTag}>\r\n        {tempTagList.map(tag => (\r\n          <li\r\n            key={tag.tagNo}\r\n            onClick={() => {\r\n              handleTag(tag.tagNm);\r\n            }}\r\n          >\r\n            <Tag tag={tag.tagNm} />\r\n            {tag.isSelected && <MdCheck />}\r\n          </li>\r\n        ))}\r\n      </ListWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default TagList;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ImCalendar } from 'react-icons/im';\r\nimport DatePicker from 'react-datepicker';\r\nimport 'react-datepicker/dist/react-datepicker.css';\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  svg {\r\n    margin-right: 5px;\r\n  }\r\n  .btn {\r\n    cursor: pointer;\r\n    &:hover {\r\n      color: #656a70;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n  .react-datepicker {\r\n    position: absolute;\r\n    top: 0;\r\n    left: -10px;\r\n    .react-datepicker__triangle {\r\n      left: 15px !important;\r\n    }\r\n  }\r\n`;\r\n\r\nconst PickerWrapper = styled.div`\r\n  position: absolute;\r\n  top: -3px;\r\n  left: 0px;\r\n  z-index: 1;\r\n  display: flex;\r\n  width: 170px;\r\n  .react-datepicker-wrapper {\r\n    &:last-of-type {\r\n      margin-left: 3px;\r\n    }\r\n    input {\r\n      width: inherit;\r\n      padding: 3px 2px;\r\n      color: $gray-dark;\r\n      font-size: 0.7rem;\r\n    }\r\n    .react-datepicker__input-container .react-datepicker__close-icon {\r\n      padding: 0;\r\n      margin-right: 5px;\r\n    }\r\n    .react-datepicker__close-icon::after {\r\n      height: 12px;\r\n      width: 12px;\r\n      font-size: 10px;\r\n      vertical-align: initial;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Calendar = ({\r\n  onToggle,\r\n  activeDate,\r\n  startDt,\r\n  endDt,\r\n  setStartDate,\r\n  setEndDate,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <ImCalendar className=\"btn\" onClick={() => onToggle('date')} />\r\n      {activeDate && (\r\n        <PickerWrapper>\r\n          <DatePicker\r\n            selected={startDt}\r\n            onChange={date => setStartDate(date)}\r\n            isClearable\r\n            placeholderText=\"시작일\"\r\n            dateFormat=\"yyyy-MM-dd\"\r\n          />\r\n          <DatePicker\r\n            selected={endDt}\r\n            onChange={date => setEndDate(date)}\r\n            isClearable\r\n            placeholderText=\"마감일\"\r\n            dateFormat=\"yyyy/MM/dd\"\r\n          />\r\n        </PickerWrapper>\r\n      )}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","export const today = new Date().toISOString().substring(0, 10);\r\nexport const getFormatDate = date => {\r\n  // formate Date to String(yyyy-mm-dd)\r\n  if (!date) return null;\r\n  const yyyy = date.getFullYear();\r\n  let mm = 1 + date.getMonth();\r\n  mm = mm >= 10 ? mm : '0' + mm;\r\n  let dd = date.getDate();\r\n  dd = dd >= 10 ? dd : '0' + dd;\r\n  return yyyy + '-' + mm + '-' + dd;\r\n};\r\nexport const strToDate = str => {\r\n  // str = yyyy-mm-dd\r\n  const yy = str.substring(0, 4);\r\n  const mm = str.substring(5, 7);\r\n  const dd = str.substring(8);\r\n  return new Date(yy, mm - 1, dd);\r\n};\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled, { css } from 'styled-components';\r\nimport { TiPencil, TiPlus, TiTimes } from 'react-icons/ti';\r\nimport MberList from './components/MberList';\r\nimport TagList from './components/TagList';\r\nimport Calendar from './components/Calendar';\r\nimport Modal from '../../../components/Modal/Modal';\r\nimport { getFormatDate } from '../../../utils/utils';\r\nimport {\r\n  delTasklist,\r\n  changeTasklistTitle,\r\n  addTask,\r\n} from '../../../module/tasklists';\r\n\r\nconst TitleWrapper = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 10px;\r\n  background: ${props => props.theme.layout.layoutBg1};\r\n  h4 {\r\n    width: 70%;\r\n    font-size: 0.9rem;\r\n    font-weight: 500;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 75%;\r\n  padding: 3px 7px;\r\n  border: 2px solid ${props => props.theme.layout.mainColor};\r\n  border-radius: 3px;\r\n  outline: 0;\r\n`;\r\n\r\nconst TitleBtnWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 1.2rem;\r\n  svg {\r\n    margin-left: 8px;\r\n    &:nth-child(2) {\r\n      margin-left: 10px;\r\n      font-size: 1.3rem;\r\n    }\r\n    &:nth-child(3) {\r\n      font-size: 1.5rem;\r\n    }\r\n    &:hover {\r\n      background: #7bb0b9;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst DoingWrapper = styled.div`\r\n  padding: 6px 10px;\r\n  background: #c0e0e5;\r\n  color: #333;\r\n  font-size: 0.75rem;\r\n`;\r\n\r\nconst CreateTask = styled.div`\r\n  display: ${props => (props.activeCreate ? 'block' : 'none')};\r\n  width: 100%;\r\n  padding: 0 10px 10px;\r\n  background: ${props => props.theme.layout.layoutBg1};\r\n  textarea {\r\n    width: 100%;\r\n    height: 65px;\r\n    padding: 5px 7px;\r\n    border: 2px solid ${props => props.theme.layout.mainColor};\r\n    border-radius: 3px;\r\n    border-bottom: 0;\r\n    outline: 0;\r\n    resize: none;\r\n  }\r\n`;\r\n\r\nconst CrBtnWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  width: 100%;\r\n  margin-top: -10px;\r\n  padding: 5px;\r\n  background: white;\r\n  border: 2px solid ${props => props.theme.layout.mainColor};\r\n  border-radius: 3px;\r\n  border-top: 0;\r\n  ${props =>\r\n    props.activeDate &&\r\n    css`\r\n      position: relative;\r\n      padding-bottom: 35px;\r\n      .cr-btn-r {\r\n        position: absolute;\r\n        right: 5px;\r\n        top: 35px;\r\n      }\r\n    `}\r\n  .cr-btn-l {\r\n    display: flex;\r\n    align-items: center;\r\n    color: #868e96;\r\n    font-size: 1rem;\r\n    & > div {\r\n      margin: 2px 5px 0 0;\r\n    }\r\n    & > svg {\r\n      margin-right: 7px;\r\n      cursor: pointer;\r\n      &:first-of-type {\r\n        font-size: 1.2rem;\r\n      }\r\n      &:hover {\r\n        color: #656a70;\r\n        cursor: pointer;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 3px 8px;\r\n  border: 0;\r\n  border-radius: 3px;\r\n  font-size: 0.78rem;\r\n  font-weight: bold;\r\n  &:hover {\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst ButtonCancel = styled(Button)`\r\n  color: #70767c;\r\n  &:hover {\r\n    background: #ccc;\r\n  }\r\n`;\r\n\r\nconst ButtonCreate = styled(Button)`\r\n  margin-left: 5px;\r\n  background: ${props => props.theme.layout.mainColor};\r\n  color: white;\r\n  &:hover {\r\n    background: #1d80a3;\r\n  }\r\n`;\r\n\r\nconst BadgeWrapper = styled.div`\r\n  position: relative;\r\n  .badge {\r\n    position: absolute;\r\n    right: 0;\r\n    top: -6px;\r\n    z-index: 10;\r\n    padding: 2px 4px;\r\n    border-radius: 4px;\r\n    color: white;\r\n    font-size: 0.5rem;\r\n    &.mber {\r\n      background: #6f777e;\r\n    }\r\n    &.priority {\r\n      background: #e03131;\r\n    }\r\n    &.important {\r\n      background: #3b5bdb;\r\n    }\r\n    &.notice {\r\n      background: #fcc419;\r\n    }\r\n  }\r\n  ${props =>\r\n    props.tag &&\r\n    css`\r\n      .badge {\r\n        background: ${props.theme.component[props.tag]};\r\n      }\r\n    `}\r\n`;\r\n\r\nconst Title = ({ tasklist, formMode, setFormMode, onToggle, onDelete }) => {\r\n  const { id } = tasklist;\r\n  const input = useRef();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!formMode) setTitle(tasklist.title);\r\n    else input.current.focus();\r\n  }, [formMode, tasklist.title, input]);\r\n\r\n  // 업무리스트 제목 관련\r\n  const [title, setTitle] = useState(tasklist.title);\r\n  const onChange = e => setTitle(e.target.value);\r\n  const handleTitle = () => {\r\n    const payload = {\r\n      id,\r\n      title,\r\n    };\r\n    dispatch(changeTasklistTitle(payload));\r\n    setFormMode(!formMode);\r\n  };\r\n\r\n  // 모달\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <Modal isOpen={isOpen} width={500} height={300} bg=\"lightgoldenrodyellow\">\r\n        <h4>⚠ [{title}] 을 정말로 삭제하시겠습니까?</h4>\r\n\r\n        <div>\r\n          <button type=\"button\" onClick={() => setIsOpen(!isOpen)}>\r\n            닫기\r\n          </button>\r\n          <button type=\"button\" onClick={() => onDelete(id)}>\r\n            삭제하기\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n      <TitleWrapper>\r\n        {!formMode ? (\r\n          <>\r\n            <h4>{title}</h4>\r\n            <TitleBtnWrapper>\r\n              <TiPencil role=\"button\" onClick={() => setFormMode(!formMode)} />\r\n              <TiPlus role=\"button\" onClick={() => onToggle('wrapper')} />\r\n              <TiTimes role=\"button\" onClick={() => setIsOpen(!isOpen)} />\r\n            </TitleBtnWrapper>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Input value={title} ref={input} onChange={onChange} />\r\n            <TitleBtnWrapper>\r\n              <TiPencil role=\"button\" onClick={handleTitle} />\r\n              <TiTimes role=\"button\" onClick={() => setFormMode(!formMode)} />\r\n            </TitleBtnWrapper>\r\n          </>\r\n        )}\r\n      </TitleWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Doing = ({ tasks }) => {\r\n  const undoneCnt = tasks\r\n    ? tasks.reduce((acc, cur) => acc + !cur.isDone, 0)\r\n    : 0;\r\n\r\n  return <DoingWrapper>진행 중인 업무 {undoneCnt}개</DoingWrapper>;\r\n};\r\n\r\nconst Header = ({ tasklist }) => {\r\n  const dispatch = useDispatch();\r\n  const { id, tasks } = tasklist;\r\n\r\n  // 업무리스트 제목 수정\r\n  // true: 수정, false: 조회\r\n  const [formMode, setFormMode] = useState(false);\r\n\r\n  // 업무리스트 삭제: 삭제 전 모달로 확인\r\n  const onDelete = id => dispatch(delTasklist(id));\r\n\r\n  // 업무 생성\r\n  // DOM 관리\r\n  const textarea = useRef();\r\n\r\n  // 활성화값 관리\r\n  const [activeCreate, setActiveCreate] = useState(false);\r\n  const [activeMber, setActiveMber] = useState(false);\r\n  const [activeTag, setActiveTag] = useState(false);\r\n  const [activeDate, setActiveDate] = useState(false);\r\n  // 선택값 관리\r\n  const [mberList, setMberList] = useState([]);\r\n  const [tag, setTag] = useState(null);\r\n  const [startDt, setStartDate] = useState(null);\r\n  const [endDt, setEndDate] = useState(null);\r\n\r\n  // 선택값 초기화\r\n  const resetState = () => {\r\n    setMberList([]);\r\n    setTag(null);\r\n    setStartDate(null);\r\n    setEndDate(null);\r\n    if (textarea.current) textarea.current.value = '';\r\n  };\r\n\r\n  const onToggle = type => {\r\n    if (type === 'wrapper') {\r\n      setActiveCreate(!activeCreate);\r\n      if (activeMber) setActiveMber(!activeMber);\r\n      if (activeTag) setActiveTag(!activeTag);\r\n      if (activeDate) setActiveDate(!activeDate);\r\n      resetState();\r\n    } else if (type === 'mber') {\r\n      setActiveMber(!activeMber);\r\n      if (activeTag) setActiveTag(!activeTag);\r\n      if (!startDt && !endDt && activeDate) setActiveDate(!activeDate);\r\n    } else if (type === 'tag') {\r\n      setActiveTag(!activeTag);\r\n      if (activeMber) setActiveMber(!activeMber);\r\n      if (!startDt && !endDt && activeDate) setActiveDate(!activeDate);\r\n    } else if (type === 'date') {\r\n      setActiveDate(!activeDate);\r\n      if (activeMber) setActiveMber(!activeMber);\r\n      if (activeTag) setActiveTag(!activeTag);\r\n    }\r\n  };\r\n\r\n  // 선택 멤버리스트값 관리\r\n  const handleMberList = mber => {\r\n    const findMber = mberList.find(m => m.mberNo === mber.mberNo);\r\n    if (findMber) {\r\n      setMberList(mberList.filter(m => m.mberNo !== mber.mberNo));\r\n    } else {\r\n      setMberList(mberList.concat(mber));\r\n    }\r\n    setActiveMber(!activeMber);\r\n  };\r\n\r\n  // 선택 태그값 관리\r\n  const handleTag = tagNm => {\r\n    if (tag === tagNm) {\r\n      setTag('');\r\n    } else {\r\n      setTag(tagNm);\r\n    }\r\n    setActiveTag(!activeTag);\r\n  };\r\n\r\n  const onCreate = () => {\r\n    const title = textarea.current;\r\n\r\n    // 유효성 검사\r\n    if (!title.value) {\r\n      alert('업무 이름을 입력하세요!');\r\n      title.focus();\r\n      return;\r\n    }\r\n    if (startDt && endDt && startDt > endDt) {\r\n      alert('마감일은 시작일보다 빠를 수 없습니다!');\r\n      setEndDate(null);\r\n      return;\r\n    }\r\n\r\n    const task = {\r\n      title: title.value,\r\n      isDone: false,\r\n      tag,\r\n      point: null,\r\n      checklist: [],\r\n      mberList,\r\n      startDt: getFormatDate(startDt),\r\n      endDt: getFormatDate(endDt),\r\n      finDt: null,\r\n    };\r\n    dispatch(addTask({ id, task }));\r\n\r\n    title.value = '';\r\n    resetState();\r\n    onToggle('wrapper');\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Title\r\n        tasklist={tasklist}\r\n        formMode={formMode}\r\n        setFormMode={setFormMode}\r\n        onToggle={onToggle}\r\n        onDelete={onDelete}\r\n      />\r\n      <Doing tasks={tasks} />\r\n      <CreateTask activeCreate={activeCreate}>\r\n        <textarea placeholder=\"새 업무 만들기\" ref={textarea}></textarea>\r\n        <CrBtnWrapper activeDate={activeDate}>\r\n          <div className=\"cr-btn-l\">\r\n            <BadgeWrapper>\r\n              {mberList.length > 0 && (\r\n                <span className=\"badge mber\">{mberList.length}</span>\r\n              )}\r\n              <MberList\r\n                onToggle={onToggle}\r\n                activeMber={activeMber}\r\n                selectedMberList={mberList}\r\n                handleMberList={handleMberList}\r\n              />\r\n            </BadgeWrapper>\r\n            <BadgeWrapper tag={tag}>\r\n              {tag && <span className=\"badge\">1</span>}\r\n              <TagList\r\n                onToggle={onToggle}\r\n                activeTag={activeTag}\r\n                tag={tag}\r\n                handleTag={handleTag}\r\n              />\r\n            </BadgeWrapper>\r\n            <Calendar\r\n              onToggle={onToggle}\r\n              activeDate={activeDate}\r\n              startDt={startDt}\r\n              endDt={endDt}\r\n              setStartDate={setStartDate}\r\n              setEndDate={setEndDate}\r\n            />\r\n          </div>\r\n          <div className=\"cr-btn-r\">\r\n            <ButtonCancel onClick={() => onToggle('wrapper')}>\r\n              취소\r\n            </ButtonCancel>\r\n            <ButtonCreate onClick={onCreate}>만들기</ButtonCreate>\r\n          </div>\r\n        </CrBtnWrapper>\r\n      </CreateTask>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst Wrapper = styled.div`\r\n  padding: 7px 10px 7px 0;\r\n  background: #f7f7f7;\r\n  /* border-top: 3px solid #ebebeb; */\r\n  color: gray;\r\n  font-size: 0.75rem;\r\n  text-align: right;\r\n  text-decoration: underline;\r\n  &:hover {\r\n    color: #333;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst Bottom = ({ cnt, onToggle }) => {\r\n  return <Wrapper onClick={onToggle}>완료된 업무 {cnt}개 보기</Wrapper>;\r\n};\r\n\r\nexport default Bottom;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TagWrapper = styled.div`\r\n  display: inline-block;\r\n  padding: 4px 5px;\r\n  border-radius: 1rem;\r\n  background: ${props => props.tag && props.theme.component[props.tag]};\r\n  color: white;\r\n  font-size: 0.6rem;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Tag = ({ tag }) => {\r\n  return <TagWrapper tag={tag}>{tag}</TagWrapper>;\r\n};\r\n\r\nexport default Tag;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PointWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  span {\r\n    width: 7px;\r\n    height: 7px;\r\n    margin-left: 2px;\r\n    border: 1px solid ${props => props.theme.layout.layoutBg2};\r\n    border-radius: 7px;\r\n    &.isFull {\r\n      border: 0;\r\n      background: ${props => props.theme.layout.mainColor};\r\n    }\r\n  }\r\n`;\r\n\r\nconst renderSpan = point => {\r\n  const spanList = [];\r\n  if (point) {\r\n    for (let i = 0; i < 5; i++) {\r\n      if (i < point) spanList.push(<span key={i} className=\"isFull\"></span>);\r\n      else spanList.push(<span key={i}></span>);\r\n    }\r\n    return spanList;\r\n  } else return null;\r\n};\r\n\r\nconst Point = ({ point }) => {\r\n  const spanList = renderSpan(point);\r\n  return <PointWrapper>{spanList && spanList.map(item => item)}</PointWrapper>;\r\n};\r\n\r\nexport default Point;\r\n","import React, { useState, useRef } from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { useDispatch } from 'react-redux';\r\nimport { MdCheckBoxOutlineBlank, MdCheckBox, MdFace } from 'react-icons/md';\r\nimport { TiPencil, TiPlus, TiTimes } from 'react-icons/ti';\r\nimport { addChecklist, setTask } from '../../../../module/tasklists';\r\n\r\nconst Wrapper = styled.div`\r\n  border: 1px solid ${props => props.theme.layout.layoutBg2};\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst List = styled.li`\r\n  display: flex;\r\n  height: 30px;\r\n  border-radius: 3px;\r\n  border-bottom: 1px solid ${props => props.theme.layout.layoutBg2};\r\n  &:last-of-type {\r\n    border-bottom: 0;\r\n  }\r\n  background: #fff;\r\n  ${props =>\r\n    props.isSetting\r\n      ? css`\r\n          &:not(:last-of-type):hover {\r\n            background: pink;\r\n          }\r\n        `\r\n      : css`\r\n          &:hover {\r\n            background: #f7f7f7;\r\n          }\r\n        `}\r\n  & > div {\r\n    padding: 5px 10px;\r\n  }\r\n`;\r\n\r\nconst Chkbox = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  padding-right: 10px;\r\n  border-right: 3px double ${props => props.theme.component.priority};\r\n  color: ${props => props.theme.layout.outer};\r\n  font-size: 0.9rem;\r\n  cursor: pointer;\r\n  &.addBtn:hover {\r\n    background: #f7f7f7;\r\n  }\r\n`;\r\n\r\nconst Chktxt = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 85%;\r\n  font-size: 0.8rem;\r\n  white-space: nowrap;\r\n  svg {\r\n    margin-right: 5px;\r\n    font-size: 1.3rem;\r\n  }\r\n  span {\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n  }\r\n  &.addBtn:hover {\r\n    background: #f7f7f7;\r\n    input {\r\n      background: #f7f7f7;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 3px 7px;\r\n  border: 2px solid ${props => props.theme.layout.mainColor};\r\n  border: 0;\r\n  border-radius: 3px;\r\n`;\r\n\r\nconst Checklist = ({\r\n  isSetting,\r\n  tasklistId,\r\n  task,\r\n  checklist,\r\n  handleCheckList,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Add Checklist\r\n  const newTitleInput = useRef();\r\n  const [newTitle, setNewTitle] = useState('');\r\n  const onChange = e => {\r\n    setNewTitle(e.target.value);\r\n  };\r\n\r\n  const onCreate = () => {\r\n    // Validation Check\r\n    if (!newTitle) {\r\n      alert('체크리스트명을 입력해 주세요!');\r\n      newTitleInput.current.focus();\r\n      return;\r\n    }\r\n\r\n    dispatch(\r\n      addChecklist({\r\n        tasklistId,\r\n        task,\r\n        checklist: {\r\n          title: newTitle,\r\n          isDone: false,\r\n        },\r\n      }),\r\n    );\r\n    setNewTitle('');\r\n\r\n    // 체크리스트 생성 후 state.tasklists.task 도 업데이트\r\n    dispatch(\r\n      setTask({\r\n        tasklistId,\r\n        taskId: task.id,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <ul>\r\n        {checklist.map(item => (\r\n          <List key={item.id} isSetting={isSetting}>\r\n            <Chkbox>\r\n              {item.isDone ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n            </Chkbox>\r\n            <Chktxt>\r\n              {item.assignedMber &&\r\n                React.createElement(item.assignedMber.profile)}\r\n              <span>{item.title}</span>\r\n            </Chktxt>\r\n          </List>\r\n        ))}\r\n        {isSetting && (\r\n          <List key=\"add\" isSetting={isSetting}>\r\n            <Chkbox className=\"addBtn\" role=\"button\" onClick={onCreate}>\r\n              <TiPlus />\r\n            </Chkbox>\r\n            <Chktxt className=\"addBtn\">\r\n              <Input\r\n                name=\"newTitle\"\r\n                value={newTitle}\r\n                onChange={onChange}\r\n                ref={newTitleInput}\r\n                placeholder=\"체크리스트 추가하기\"\r\n              />\r\n            </Chktxt>\r\n          </List>\r\n        )}\r\n      </ul>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Checklist;\r\n","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { today, strToDate } from '../../../../utils/utils';\r\n\r\nconst DeadlineWrapper = styled.div`\r\n  margin: 10px 0 15px;\r\n  padding-left: 3px;\r\n  color: ${props => props.theme.layout.mainColor};\r\n  ${props =>\r\n    props.isOver &&\r\n    css`\r\n      color: ${props => props.theme.component.priority};\r\n    `};\r\n  ${props =>\r\n    props.isFin &&\r\n    css`\r\n      color: ${props => props.theme.layout.outer};\r\n    `};\r\n  font-size: 0.7rem;\r\n  font-weight: bold;\r\n`;\r\n\r\n/*\r\n  1. 시작일만 있는 경우: ~에 시작\r\n  2. 마감일만 있는 경우\r\n    a. 마감일 안 지난 경우: ~에 마감\r\n    b. 마감일 지난 경우: 마감일 ~일 지남\r\n  3. 둘 다 있는 경우\r\n    a. 마감일 안 지난 경우: 시작일 - 마감일\r\n    b. 마감일 지난 경우: 마감일 ~일 지남\r\n  4. 완료된 경우: ~에 완료\r\n*/\r\nconst handleDeadline = (startDt, endDt, finDt) => {\r\n  const start =\r\n    startDt && `${startDt.substring(5, 7)}월${startDt.substring(8)}일`;\r\n  const end = endDt && `${endDt.substring(5, 7)}월${endDt.substring(8)}일`;\r\n  const fin = finDt && `${finDt.substring(5, 7)}월${finDt.substring(8)}일`;\r\n  let result = '';\r\n\r\n  if (fin) {\r\n    return `${fin}에 완료`;\r\n  }\r\n  if (end && today > endDt) {\r\n    const diff = (strToDate(today) - strToDate(endDt)) / (1000 * 60 * 60 * 24);\r\n    return `마감일 ${diff}일 지남`;\r\n  }\r\n\r\n  if (start && !end) {\r\n    result = `${start}에 시작`;\r\n  } else if (!start && end) {\r\n    result = `${end}에 마감`;\r\n  } else {\r\n    result = `${start} - ${end}`;\r\n  }\r\n  return result;\r\n};\r\n\r\nconst Deadline = ({ startDt, endDt, finDt }) => {\r\n  const isOver = endDt && today > endDt ? true : false; // 기한 지남 여부\r\n  const isFin = finDt ? true : false; // 완료 여부\r\n  return (\r\n    <DeadlineWrapper isOver={isOver} isFin={isFin}>\r\n      {handleDeadline(startDt, endDt, finDt)}\r\n    </DeadlineWrapper>\r\n  );\r\n};\r\n\r\nexport default Deadline;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdCheckBoxOutlineBlank, MdCheckBox } from 'react-icons/md';\r\nimport { BsCardChecklist, BsChat } from 'react-icons/bs';\r\nimport { IoMdAttach } from 'react-icons/io';\r\nimport { toggleTask } from '../../../module/tasklists';\r\nimport { today } from '../../../utils/utils';\r\nimport Tag from './components/Tag';\r\nimport Point from './components/Point';\r\nimport Checklist from './components/Checklist';\r\nimport Deadline from './components/Deadline';\r\n\r\nconst TaskWrapper = styled.div`\r\n  display: ${props =>\r\n    (props.isDone && !props.openDone && 'none') ||\r\n    (props.isDone && props.openDone && 'block')};\r\n  margin-top: 3px;\r\n  padding: 20px 15px;\r\n  background: ${props => (props.isDone ? '#eee' : '#fff')};\r\n  color: #454545;\r\n  &:hover {\r\n    background: #f7f7f7;\r\n    cursor: pointer;\r\n  }\r\n`;\r\n\r\nconst TitleWrapper = styled.div`\r\n  display: flex;\r\n  margin-bottom: 15px;\r\n  h5 {\r\n    display: flex;\r\n    align-items: center;\r\n    width: 82%;\r\n    margin-top: 10px;\r\n    svg {\r\n      margin-right: 5px;\r\n      color: ${props => props.theme.layout.layoutBg2};\r\n      font-size: 1.3rem;\r\n    }\r\n  }\r\n`;\r\n\r\nconst EtcWrapper = styled.div`\r\n  display: flex;\r\n  margin-bottom: 10px;\r\n  padding-left: 3px;\r\n  color: ${props => props.theme.layout.outer};\r\n  font-size: 0.7rem;\r\n  span {\r\n    display: inherit;\r\n    margin-right: 10px;\r\n    &:not(:last-of-type) svg {\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n`;\r\n\r\nconst MberWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  font-size: 1.5rem;\r\n`;\r\n\r\nconst Task = ({ tasklistId, task, openDone, handlePopup }) => {\r\n  const {\r\n    id,\r\n    title,\r\n    isDone,\r\n    tag,\r\n    point,\r\n    checklist,\r\n    mberList,\r\n    startDt,\r\n    endDt,\r\n    finDt,\r\n  } = task;\r\n  const checklistDoneCnt = checklist.reduce((acc, cur) => acc + cur.isDone, 0);\r\n  const dispatch = useDispatch();\r\n\r\n  // 업무 완료 토글\r\n  const onToggleTask = () => {\r\n    const payload = {\r\n      id: tasklistId,\r\n      task: { id: task.id, finDt: task.finDt ? null : today },\r\n    };\r\n    dispatch(toggleTask(payload));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <TaskWrapper\r\n        isDone={isDone}\r\n        openDone={openDone}\r\n        onClick={() => handlePopup(id)}\r\n      >\r\n        {tag && <Tag tag={tag} />}\r\n        <TitleWrapper>\r\n          <h5>\r\n            <span onClick={onToggleTask}>\r\n              {isDone ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\r\n            </span>\r\n            {title}\r\n          </h5>\r\n          <Point point={point} />\r\n        </TitleWrapper>\r\n        {checklist.length ? <Checklist checklist={checklist} /> : null}\r\n        {startDt || endDt || finDt ? (\r\n          <Deadline startDt={startDt} endDt={endDt} finDt={finDt} />\r\n        ) : null}\r\n        <EtcWrapper>\r\n          <span>\r\n            <BsCardChecklist />\r\n            {checklist.length ? `${checklistDoneCnt}/${checklist.length}` : 0}\r\n          </span>\r\n          {/* <span>\r\n          <BsChat /> {commentList.length}\r\n        </span>\r\n        <span>\r\n          <IoMdAttach /> {fileList.length}\r\n        </span> */}\r\n        </EtcWrapper>\r\n        <MberWrapper>\r\n          {mberList.map(mber =>\r\n            React.createElement(mber.profile, { key: mber.mberNo }, null),\r\n          )}\r\n        </MberWrapper>\r\n      </TaskWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Point from './Point';\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  svg {\r\n    margin-right: 5px;\r\n    font-size: 1.2rem;\r\n  }\r\n  .btn {\r\n    cursor: pointer;\r\n    &:hover {\r\n      color: #656a70;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst ListWrapper = styled.ul`\r\n  position: absolute;\r\n  top: 30px;\r\n  left: 0;\r\n  z-index: 10;\r\n  display: ${props => (props.activePoint ? 'block' : 'none')};\r\n  width: 120px;\r\n  height: 120px;\r\n  overflow-y: auto;\r\n  padding: 5px;\r\n  background: white;\r\n  font-size: 0.8rem;\r\n  li {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 5px;\r\n    cursor: pointer;\r\n    &:hover {\r\n      background: #eee;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst PointWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  span {\r\n    width: 7px;\r\n    height: 7px;\r\n    margin-left: 2px;\r\n    border: 1px solid ${props => props.theme.layout.layoutBg2};\r\n    border-radius: 7px;\r\n    &.isFull {\r\n      border: 0;\r\n      background: ${props => props.theme.layout.mainColor};\r\n    }\r\n  }\r\n`;\r\n\r\nconst PointList = ({ point, handlePoint, activePoint, onToggle }) => {\r\n  const renderPoints = () => {\r\n    const count = 5;\r\n    let renderList = [];\r\n\r\n    for (let i = 0; i <= count; i++) {\r\n      let spanList = [];\r\n\r\n      for (let j = 1; j <= count; j++) {\r\n        if (!i) {\r\n          // if span is all empty\r\n          spanList.push(<span key={`${i}-${j}`}></span>);\r\n        } else if (i === count) {\r\n          // if span is all full\r\n          spanList.push(<span key={`${i}-${j}`} className=\"isFull\"></span>);\r\n        } else {\r\n          if (i >= j) {\r\n            spanList.push(<span key={`${i}-${j}`} className=\"isFull\"></span>);\r\n          } else {\r\n            spanList.push(<span key={`${i}-${j}`}></span>);\r\n          }\r\n        }\r\n      }\r\n      renderList.push(\r\n        <li key={i} value={i} onClick={() => handlePoint(i)} role=\"button\">\r\n          <PointWrapper>{spanList}</PointWrapper>\r\n        </li>,\r\n      );\r\n    }\r\n\r\n    return renderList;\r\n  };\r\n  const options = renderPoints();\r\n\r\n  return (\r\n    <Wrapper>\r\n      <div>\r\n        <Point point={point} />\r\n        <button type=\"button\" onClick={() => onToggle('point')}>\r\n          >\r\n        </button>\r\n      </div>\r\n      <ListWrapper activePoint={activePoint}>\r\n        {options && options.map(option => option)}\r\n      </ListWrapper>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default PointList;\r\n","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { TiPencil, TiTimes } from 'react-icons/ti';\r\nimport {\r\n  setTask,\r\n  clearTask,\r\n  changeTaskTitle,\r\n  delTask,\r\n  changeTaskSettings,\r\n} from '../../../module/tasklists';\r\nimport { getFormatDate, strToDate } from '../../../utils/utils';\r\nimport Modal from '../../../components/Modal/Modal';\r\nimport Calendar from './components/Calendar';\r\nimport MberList from './components/MberList';\r\nimport TagList from './components/TagList';\r\nimport Tag from './components/Tag';\r\nimport PointList from './components/PointList';\r\nimport Checklist from './components/Checklist';\r\n\r\nconst Wrapper = styled.div`\r\n  position: absolute;\r\n  left: ${props => props.left}px;\r\n  top: 50px;\r\n  width: 300px;\r\n  height: 500px;\r\n  background: #f7f7f7;\r\n  border-radius: 8px;\r\n`;\r\n\r\nconst CloseBtn = styled.button`\r\n  position: absolute;\r\n  right: -50px;\r\n  top: 10px;\r\n  z-index: -1;\r\n  display: flex;\r\n  align-items: center;\r\n  width: 60px;\r\n  height: 50px;\r\n  padding-left: 20px;\r\n  background: pink;\r\n  border: 0;\r\n  border-radius: 8px;\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst TitleWrapper = styled.header`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n  padding: 20px;\r\n  background: #fff;\r\n  border-bottom: 2px solid ${props => props.theme.layout.mainColor};\r\n  border-radius: 8px 8px 0 0;\r\n  h4 {\r\n    width: 70%;\r\n    font-size: 0.9rem;\r\n    font-weight: 500;\r\n  }\r\n`;\r\n\r\nconst TitleInput = styled.input`\r\n  width: 75%;\r\n  padding: 3px 7px;\r\n  border: 2px solid ${props => props.theme.layout.mainColor};\r\n  border-radius: 3px;\r\n  outline: 0;\r\n`;\r\n\r\nconst TitleBtnWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  font-size: 1.2rem;\r\n  svg {\r\n    margin-left: 8px;\r\n    &:nth-child(2) {\r\n      margin-left: 10px;\r\n      font-size: 1.3rem;\r\n    }\r\n    &:nth-child(3) {\r\n      font-size: 1.5rem;\r\n    }\r\n    &:hover {\r\n      background: #eee;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst Setting = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst Title = ({\r\n  openPopup,\r\n  setOpenPopup,\r\n  tasklistId,\r\n  formMode,\r\n  setFormMode,\r\n}) => {\r\n  const { task } = useSelector(state => state.tasklists);\r\n  const dispatch = useDispatch();\r\n\r\n  const input = useRef();\r\n  const [title, setTitle] = useState(task.title);\r\n\r\n  useEffect(() => {\r\n    if (!formMode) setTitle(task.title);\r\n    else input.current.focus();\r\n  }, [formMode, task, input]);\r\n\r\n  // Set payload about Ids\r\n  const payload = {\r\n    tasklistId,\r\n    taskId: task.id,\r\n  };\r\n\r\n  // Handle Task title\r\n  const onChange = e => setTitle(e.target.value);\r\n  const handleTitle = () => {\r\n    dispatch(\r\n      changeTaskTitle({\r\n        tasklistId,\r\n        taskId: task.id,\r\n        title,\r\n      }),\r\n    );\r\n    dispatch(setTask(payload));\r\n    setFormMode(!formMode);\r\n  };\r\n\r\n  // Delete Task\r\n  // Modal\r\n  const [openModal, setOpenModal] = useState(false);\r\n  const onDelete = () => {\r\n    dispatch(delTask(payload));\r\n    dispatch(clearTask());\r\n    setOpenModal(!openModal);\r\n    setOpenPopup(!openPopup);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Modal\r\n        isOpen={openModal}\r\n        width={500}\r\n        height={300}\r\n        bg=\"lightgoldenrodyellow\"\r\n      >\r\n        <h4>⚠ [{title}] 을 정말로 삭제하시겠습니까?</h4>\r\n        <div>\r\n          <button type=\"button\" onClick={() => setOpenModal(!openModal)}>\r\n            닫기\r\n          </button>\r\n          <button type=\"button\" onClick={onDelete}>\r\n            삭제하기\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n      <TitleWrapper>\r\n        {!formMode ? (\r\n          <>\r\n            <h4>{title}</h4>\r\n            <TitleBtnWrapper>\r\n              <TiPencil role=\"button\" onClick={() => setFormMode(!formMode)} />\r\n              <TiTimes role=\"button\" onClick={() => setOpenModal(!openModal)} />\r\n            </TitleBtnWrapper>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <TitleInput value={title} ref={input} onChange={onChange} />\r\n            <TitleBtnWrapper>\r\n              <TiPencil role=\"button\" onClick={handleTitle} />\r\n              <TiTimes role=\"button\" onClick={() => setFormMode(!formMode)} />\r\n            </TitleBtnWrapper>\r\n          </>\r\n        )}\r\n      </TitleWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nconst Dates = ({ task, tasklistId, onToggle, activeDate }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  // Convert String to Date: Calendar's format is only possible to date type\r\n  const startDate = task.startDt ? strToDate(task.startDt) : null;\r\n  const endDate = task.endDt ? strToDate(task.endDt) : null;\r\n\r\n  const [startDt, setStartDate] = useState(startDate);\r\n  const [endDt, setEndDate] = useState(endDate);\r\n\r\n  // Convert Date to String for setting task's state\r\n  const startStr = startDt ? getFormatDate(startDt) : null;\r\n  const endStr = endDt ? getFormatDate(endDt) : null;\r\n\r\n  useEffect(() => {\r\n    if (task.startDt !== startStr || task.endDt !== endStr) {\r\n      dispatch(\r\n        changeTaskSettings({\r\n          tasklistId,\r\n          task: {\r\n            ...task,\r\n            startDt: startStr,\r\n            endDt: endStr,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }, [dispatch, startDt, endDt, endStr, startStr, task, tasklistId]);\r\n\r\n  return (\r\n    <Setting>\r\n      <p>기한</p>\r\n      <Calendar\r\n        onToggle={onToggle}\r\n        activeDate={activeDate}\r\n        startDt={startDt}\r\n        endDt={endDt}\r\n        setStartDate={setStartDate}\r\n        setEndDate={setEndDate}\r\n      />\r\n    </Setting>\r\n  );\r\n};\r\n\r\nconst Mbers = ({ task, tasklistId, onToggle, activeMber }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [mberList, setMberList] = useState(task.mberList);\r\n  const handleMberList = mber => {\r\n    const findMber = mberList.find(m => m.mberNo === mber.mberNo);\r\n    if (findMber) {\r\n      setMberList(mberList.filter(m => m.mberNo !== mber.mberNo));\r\n    } else {\r\n      setMberList(mberList.concat(mber));\r\n    }\r\n    onToggle('mber');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Compare selectedMberList with task.mberList\r\n    let diff = 0;\r\n    for (let item of mberList) {\r\n      const existingMber = task.mberList.find(m => m.mberNo === item.mberNo);\r\n      if (existingMber) diff++;\r\n    }\r\n\r\n    // If find diffrence, Change task state!\r\n    if (diff) {\r\n      dispatch(\r\n        changeTaskSettings({\r\n          tasklistId,\r\n          task: {\r\n            ...task,\r\n            mberList,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }, [dispatch, mberList, task, tasklistId]);\r\n\r\n  return (\r\n    <Setting>\r\n      <p>배정 멤버</p>\r\n      <ul>\r\n        {mberList.length > 0 &&\r\n          mberList.map(mber => (\r\n            <li key={mber.mberNo}>\r\n              {React.createElement(mber.profile)}\r\n              {mber.mberNm}\r\n            </li>\r\n          ))}\r\n      </ul>\r\n      <MberList\r\n        onToggle={onToggle}\r\n        activeMber={activeMber}\r\n        selectedMberList={mberList}\r\n        handleMberList={handleMberList}\r\n      />\r\n    </Setting>\r\n  );\r\n};\r\n\r\nconst Tags = ({ task, tasklistId, activeTag, onToggle }) => {\r\n  const dispatch = useDispatch();\r\n  const [tag, setTag] = useState(task.tag);\r\n\r\n  const handleTag = tagNm => {\r\n    if (tag === tagNm) {\r\n      setTag('');\r\n    } else {\r\n      setTag(tagNm);\r\n    }\r\n    onToggle('tag');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // If find diffrence, Change task state!\r\n    if (tag !== task.tag) {\r\n      dispatch(\r\n        changeTaskSettings({\r\n          tasklistId,\r\n          task: {\r\n            ...task,\r\n            tag,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }, [dispatch, tag, task, tasklistId]);\r\n\r\n  return (\r\n    <Setting>\r\n      <p>태그</p>\r\n      {tag && <Tag tag={tag} />}\r\n      <TagList\r\n        onToggle={onToggle}\r\n        activeTag={activeTag}\r\n        tag={tag}\r\n        handleTag={handleTag}\r\n      />\r\n    </Setting>\r\n  );\r\n};\r\n\r\nconst Points = ({ task, tasklistId, activePoint, onToggle }) => {\r\n  const dispatch = useDispatch();\r\n  const [point, setPoint] = useState(task.point ? task.point : 0);\r\n\r\n  const handlePoint = point => {\r\n    setPoint(point);\r\n    onToggle('point');\r\n  };\r\n\r\n  useEffect(() => {\r\n    // If find diffrence, Change task state!\r\n    if (point !== task.point) {\r\n      dispatch(\r\n        changeTaskSettings({\r\n          tasklistId,\r\n          task: {\r\n            ...task,\r\n            point,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }, [dispatch, point, task, tasklistId]);\r\n\r\n  return (\r\n    <Setting>\r\n      <p>포인트</p>\r\n      <PointList\r\n        point={point}\r\n        handlePoint={handlePoint}\r\n        activePoint={activePoint}\r\n        onToggle={onToggle}\r\n      />\r\n    </Setting>\r\n  );\r\n};\r\n\r\n// 미적용\r\nconst Checklists = ({ task, tasklistId }) => {\r\n  const dispatch = useDispatch();\r\n  const [checklist, setChecklist] = useState(task.checklist);\r\n\r\n  const handleCheckList = chk => {\r\n    const findChk = checklist.find(c => c.chkNo === chk.chkNo);\r\n    if (findChk) {\r\n      setChecklist(checklist.filter(c => c.chkNo !== chk.chkNo));\r\n    } else {\r\n      setChecklist(checklist.concat(chk));\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Compare checklist with task.checklist\r\n    let diff = 0;\r\n    for (let item of checklist) {\r\n      const existing = task.checklist.find(c => c.chkNo === item.chkNo);\r\n      if (existing) diff++;\r\n    }\r\n\r\n    // If find diffrence, Change task state!\r\n    if (diff) {\r\n      dispatch(\r\n        changeTaskSettings({\r\n          tasklistId,\r\n          task: {\r\n            ...task,\r\n            checklist,\r\n          },\r\n        }),\r\n      );\r\n    }\r\n  }, [dispatch, checklist, task, tasklistId]);\r\n\r\n  return (\r\n    <Setting>\r\n      <Checklist\r\n        isSetting={true}\r\n        tasklistId={tasklistId}\r\n        task={task}\r\n        checklist={checklist}\r\n        handleCheckList={handleCheckList}\r\n      />\r\n    </Setting>\r\n  );\r\n};\r\n\r\nconst SidePopup = ({ openPopup, setOpenPopup, tasklistId }) => {\r\n  const { task } = useSelector(state => state.tasklists);\r\n  const wrapper = useRef();\r\n  console.log('Sidepopup', task);\r\n\r\n  // Set popup's position\r\n  let interval;\r\n  let left = window.innerWidth - 450;\r\n  const setPosition = () => {\r\n    left = window.innerWidth - 450;\r\n    wrapper.current.style.left = `${left}px`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    interval = setInterval(setPosition, 1000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  // Set task title's mode\r\n  const [formMode, setFormMode] = useState(false);\r\n\r\n  // States about activation\r\n  const [activeDate, setActiveDate] = useState(false);\r\n  const [activeMber, setActiveMber] = useState(false);\r\n  const [activeTag, setActiveTag] = useState(false);\r\n  const [activePoint, setaActivePoint] = useState(false);\r\n\r\n  const handleActiveStates = type => {\r\n    if (type !== 'date' && activeDate) setActiveDate(!activeDate);\r\n    else if (type !== 'mber' && activeMber) setActiveMber(!activeMber);\r\n    else if (type !== 'tag' && activeTag) setActiveTag(!activeTag);\r\n    else if (type !== 'point' && activePoint) setaActivePoint(!activePoint);\r\n  };\r\n\r\n  const onToggle = type => {\r\n    if (type === 'date') {\r\n      setActiveDate(!activeDate);\r\n      handleActiveStates(type);\r\n    } else if (type === 'mber') {\r\n      setActiveMber(!activeMber);\r\n      handleActiveStates(type);\r\n    } else if (type === 'tag') {\r\n      setActiveTag(!activeTag);\r\n      handleActiveStates(type);\r\n    } else if (type === 'point') {\r\n      setaActivePoint(!activePoint);\r\n      handleActiveStates(type);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper ref={wrapper} left={left}>\r\n      <CloseBtn onClick={() => setOpenPopup(!openPopup)}>닫기</CloseBtn>\r\n      <Title\r\n        openPopup={openPopup}\r\n        setOpenPopup={setOpenPopup}\r\n        tasklistId={tasklistId}\r\n        formMode={formMode}\r\n        setFormMode={setFormMode}\r\n      />\r\n      <Dates\r\n        task={task}\r\n        tasklistId={tasklistId}\r\n        activeDate={activeDate}\r\n        onToggle={onToggle}\r\n      />\r\n      <Mbers\r\n        task={task}\r\n        tasklistId={tasklistId}\r\n        activeMber={activeMber}\r\n        onToggle={onToggle}\r\n      />\r\n      <Tags\r\n        task={task}\r\n        tasklistId={tasklistId}\r\n        activeTag={activeTag}\r\n        onToggle={onToggle}\r\n      />\r\n      <Points\r\n        task={task}\r\n        tasklistId={tasklistId}\r\n        activePoint={activePoint}\r\n        onToggle={onToggle}\r\n      />\r\n      {/* <Checklists task={task} tasklistId={tasklistId} /> */}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default SidePopup;\r\n","import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport { setTask } from '../../../module/tasklists';\r\nimport Header from './Header';\r\nimport Bottom from './Bottom';\r\nimport Task from './Task';\r\nimport SidePopup from './SidePopup';\r\n\r\nconst Article = styled.article`\r\n  width: 300px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst TaskList = styled.div`\r\n  max-height: 600px;\r\n  overflow-y: auto;\r\n  background: #f7f7f7;\r\n  & > div:first-of-type {\r\n    margin-top: 0;\r\n  }\r\n`;\r\n\r\nconst Tasklist = ({ tasklist }) => {\r\n  const { tasks } = tasklist;\r\n  const undoneList = tasks ? tasks.filter(item => !item.isDone) : []; // 진행 중인 업무\r\n  const doneList = tasks ? tasks.filter(item => item.isDone) : []; // 완료된 업무\r\n\r\n  // 완료된 업무 보기\r\n  const [openDone, setOpenDone] = useState(false);\r\n  const onToggle = () => setOpenDone(!openDone);\r\n\r\n  // 업무 선택 -> 수정팝업 오픈\r\n  const dispatch = useDispatch();\r\n  const [openPopup, setOpenPopup] = useState(false);\r\n  const handlePopup = id => {\r\n    dispatch(\r\n      setTask({\r\n        tasklistId: tasklist.id,\r\n        taskId: id,\r\n      }),\r\n    );\r\n    setOpenPopup(!openPopup);\r\n  };\r\n\r\n  return (\r\n    <Article>\r\n      {openPopup && (\r\n        <SidePopup\r\n          openPopup={openPopup}\r\n          setOpenPopup={setOpenPopup}\r\n          tasklistId={tasklist.id}\r\n        />\r\n      )}\r\n      <Header tasklist={tasklist} />\r\n      <TaskList>\r\n        {undoneList.map(task => (\r\n          <Task\r\n            key={task.id}\r\n            tasklistId={tasklist.id}\r\n            task={task}\r\n            handlePopup={handlePopup}\r\n          />\r\n        ))}\r\n        {doneList.map(task => (\r\n          <Task\r\n            key={task.id}\r\n            tasklistId={tasklist.id}\r\n            task={task}\r\n            openDone={openDone}\r\n            handlePopup={handlePopup}\r\n          />\r\n        ))}\r\n      </TaskList>\r\n      <Bottom cnt={doneList.length} onToggle={onToggle} />\r\n    </Article>\r\n  );\r\n};\r\n\r\nexport default Tasklist;\r\n","import React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport styled from 'styled-components';\r\nimport { TiPlus, TiTimes } from 'react-icons/ti';\r\nimport { useDispatch } from 'react-redux';\r\nimport { addTasklist } from '../../../module/tasklists';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  width: 300px;\r\n  height: 44px;\r\n  padding: 10px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst ViewWrapper = styled(Wrapper)`\r\n  background: ${props => props.theme.layout.layoutBg2};\r\n  color: #454545;\r\n  &:hover {\r\n    background: ${props => props.theme.layout.mainColor};\r\n    color: #fff;\r\n  }\r\n  font-weight: bold;\r\n  cursor: pointer;\r\n  h4 {\r\n    width: 70%;\r\n    margin-left: 5px;\r\n    font-size: 0.9rem;\r\n  }\r\n`;\r\n\r\nconst FormWrapper = styled(Wrapper)`\r\n  background: ${props => props.theme.layout.layoutBg1};\r\n  color: #454545;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  width: 75%;\r\n  padding: 3px 7px;\r\n  border: 2px solid ${props => props.theme.layout.mainColor};\r\n  border-radius: 3px;\r\n  outline: 0;\r\n`;\r\n\r\nconst HeaderBtnWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: flex-end;\r\n  align-items: center;\r\n  width: 25%;\r\n  font-size: 1.2rem;\r\n  svg {\r\n    margin-left: 8px;\r\n    font-size: 1.3rem;\r\n    &:last-of-type {\r\n      font-size: 1.5rem;\r\n    }\r\n    &:hover {\r\n      background: #7bb0b9;\r\n      cursor: pointer;\r\n    }\r\n  }\r\n`;\r\n\r\nconst List = ({ isActive, setIsActive }) => {\r\n  const input = useRef();\r\n\r\n  useEffect(() => {\r\n    if (isActive) {\r\n      const title = input.current;\r\n      title.value = '';\r\n      title.focus();\r\n    }\r\n  }, [isActive]);\r\n\r\n  // 리스트 생성\r\n  const dispatch = useDispatch();\r\n  const [title, setTitle] = useState('');\r\n  const onChange = e => {\r\n    setTitle(e.target.value);\r\n  };\r\n  const onCreate = useCallback(() => {\r\n    if (!title) {\r\n      alert('리스트 제목을 입력하세요!');\r\n      return;\r\n    }\r\n    dispatch(addTasklist(title));\r\n    setTitle('');\r\n    setIsActive(!isActive);\r\n  }, [title]);\r\n\r\n  return (\r\n    <>\r\n      {isActive ? (\r\n        <FormWrapper>\r\n          <Input\r\n            placeholder=\"리스트 제목\"\r\n            value={title}\r\n            onChange={onChange}\r\n            ref={input}\r\n          />\r\n          <HeaderBtnWrapper>\r\n            <TiPlus role=\"button\" onClick={onCreate} />\r\n            <TiTimes role=\"button\" onClick={() => setIsActive(!isActive)} />\r\n          </HeaderBtnWrapper>\r\n        </FormWrapper>\r\n      ) : (\r\n        <ViewWrapper role=\"button\" onClick={() => setIsActive(!isActive)}>\r\n          <TiPlus />\r\n          <h4>업무리스트 추가</h4>\r\n        </ViewWrapper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst AddTaskList = () => {\r\n  const [isActive, setIsActive] = useState(false);\r\n\r\n  return <List isActive={isActive} setIsActive={setIsActive} />;\r\n};\r\n\r\nexport default AddTaskList;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport Post from '../../components/Layout/Post';\r\nimport Tasklist from './Tasklist/index';\r\nimport AddTaskList from './Tasklist/AddTaskList';\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  width: fit-content;\r\n  height: 100%;\r\n  border: 1px solid;\r\n`;\r\n\r\nconst TasklistWrapper = () => {\r\n  const { tasklists } = useSelector(state => state.tasklists);\r\n\r\n  return (\r\n    <Post fixed={true}>\r\n      <h3>업무리스트</h3>\r\n      <Wrapper>\r\n        {tasklists.map(tasklist => (\r\n          <Tasklist key={tasklist.id} tasklist={tasklist} />\r\n        ))}\r\n        <AddTaskList />\r\n      </Wrapper>\r\n    </Post>\r\n  );\r\n};\r\n\r\nexport default TasklistWrapper;\r\n","import React from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { ThemeProvider } from 'styled-components';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport Menu from './components/Menu/MainMenu';\r\nimport Home from './pages/Home';\r\nimport Diary from './pages/Diary';\r\nimport Workbox from './pages/Workbox';\r\n\r\n// const App = () => {\r\n//   const { layout, component } = useSelector(state => state.palette);\r\n\r\n//   return (\r\n//     <ThemeProvider\r\n//       theme={{\r\n//         layout,\r\n//         component,\r\n//       }}\r\n//     >\r\n//       <Switch>\r\n//         <Route exact path=\"/\">\r\n//           <Home />\r\n//         </Route>\r\n//         <Route path=\"/diary\">\r\n//           <Diary />\r\n//         </Route>\r\n//         <Route path=\"/workbox\">\r\n//           <Workbox />\r\n//         </Route>\r\n//         <Route path=\"/photo\">\r\n//           <Photo />\r\n//         </Route>\r\n//         <Route path=\"/gbook\">\r\n//           <Gbook />\r\n//         </Route>\r\n//       </Switch>\r\n//     </ThemeProvider>\r\n//   );\r\n// };\r\n\r\n// function Photo() {\r\n//   return (\r\n//     <div>\r\n//       Photo\r\n//       <Menu />\r\n//     </div>\r\n//   );\r\n// }\r\n// function Gbook() {\r\n//   return (\r\n//     <div>\r\n//       Gbook\r\n//       <Menu />\r\n//     </div>\r\n//   );\r\n// }\r\n\r\nconst App = () => {\r\n  return <div>hello react</div>;\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { combineReducers } from 'redux';\r\nimport palette from './palette';\r\nimport formMode from './formMode';\r\nimport boards from './boards';\r\nimport tasklists from './tasklists';\r\nimport layout from './layout';\r\n\r\nconst rootReducer = combineReducers({\r\n  palette,\r\n  layout,\r\n  formMode,\r\n  boards,\r\n  tasklists,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { createStore } from 'redux';\r\nimport { Provider } from 'react-redux';\r\nimport rootReducer from './module';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools());\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}